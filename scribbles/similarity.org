#+TITLE: Measuring model similarities
#+AUTHOR: Abhinav Tushar

Here we will try to see how similar are predictions from each of the component
models. Taking a mean /might/ give us a general sense of similarities among
models. We will be focusing on one setting as of now.

#+BEGIN_SRC python :session :eval never-export :exports both :results none
import numpy as np
import matplotlib.pyplot as plt
import os
#+END_SRC

* Collaborative setting
Here we have data from 21 models. All the models have their predicted
distributions in the same order providing predictions for a certain epiweek /and/
a certain region.

** ~1-ahead~ prediction
This target has 131 bins.

#+BEGIN_SRC python :session :eval never-export :exports both :results output
  adist = np.loadtxt("../data/processed/collaborative/CU-EAKFC_SIRS/1.np.gz")
  bdist = np.loadtxt("../data/processed/collaborative/CU-BMA/1.np.gz")
  cdist = np.loadtxt("../data/processed/collaborative/ReichLab-KCDE/1.np.gz")
  epsilon = np.finfo(adist.dtype).eps

  # Replace zeros with epsilon
  adist[adist == 0] = epsilon
  bdist[bdist == 0] = epsilon
  cdist[cdist == 0] = epsilon
#+END_SRC

#+RESULTS:

Now we define the similarity metric (not exactly since KL Divergence is not a
metric)

#+BEGIN_SRC python :session :eval never-export :exports both :results output
  def sim_kld(adist, bdist):
      """
      Return mean kl divergence between the two predictions.
      Assume that the distributions don't have zeros in them.
      """

      divergences = np.sum(adist * (np.log(adist) - np.log(bdist)), axis=1)

      return np.mean(divergences)

  def sim_tv(adist, bdist):
      """
      Mean total variation distance between dists
      """

      raise NotImplementedError()

  def sim_hellinger(adist, bdist):
      """
      Mean hellinger distance. Obeys triangle inequality and is symmetric.
      """

      bhattacharyya_coeffs = np.sum(np.sqrt((adist * bdist).clip(max=1, min=0)), axis=1)

      return np.mean(np.sqrt((1 - bhattacharyya_coeffs).clip(max=1, min=0)))
#+END_SRC

#+RESULTS:

Load all the models with correct number of items:

#+BEGIN_SRC python :session :eval never-export :exports both :results output
  model_names = os.listdir("../data/processed/collaborative")
  # Filtering out the one with incomplete data
  model_names.remove("CU-EAKFC_SEIRS")

  def get_predictions(target_id):
      """
      Return predictions for all models for specified target
      """

      predictions = []
      for name in model_names:
          mat = np.loadtxt(f"../data/processed/collaborative/{name}/{target_id}.np.gz")
          mat[mat == 0] = epsilon
          predictions.append(mat.copy())

      return predictions

  one_ahead_predictions = get_predictions(1)
#+END_SRC

#+RESULTS:

Lets verify that all the models have correct shape
#+BEGIN_SRC python :session :eval never-export :exports both :results output
  print(all([p.shape[0] == 2552 for p in one_ahead_predictions]))
#+END_SRC

#+RESULTS:
: True

Alright.

#+BEGIN_SRC python :session :eval never-export :exports both :results file
  def plot_sims(names, predictions, sim_fn, output, title):
      """
      Plot a matrix heatmap of similarities
      """

      n = len(names)
      sims = np.zeros((n, n))

      for i, ap in enumerate(predictions):
          for j, bp in enumerate(predictions):
              sims[i, j] = sim_fn(ap, bp)

      plt.figure(figsize=(10, 10))
      plt.imshow(sims / sims.max(), cmap="hot")
      plt.xticks(range(n), names, rotation="vertical")
      plt.yticks(range(n), names)
      plt.title(title)
      plt.colorbar()
      plt.tight_layout()
      plt.savefig(output)

  plot_sims(model_names, one_ahead_predictions, sim_hellinger, "similarity/1-ahead.png", "1-ahead mean hellinger distances")
  "similarity/1-ahead.png"
#+END_SRC

#+RESULTS:
[[file:similarity/1-ahead.png]]

** All other targets

#+BEGIN_SRC python :session :eval never-export :exports both :results output
  def plot_sims(names, predictions, sim_fn, output, title):
      """
      Plot a matrix heatmap of similarities
      """

      n = len(names)
      sims = np.zeros((n, n))

      for i, ap in enumerate(predictions):
          for j, bp in enumerate(predictions):
              sims[i, j] = sim_fn(ap, bp)

      plt.figure(figsize=(10, 10))
      plt.imshow(sims / sims.max(), cmap="hot")
      plt.xticks(range(n), names, rotation="vertical")
      plt.yticks(range(n), names)
      plt.title(title)
      plt.colorbar()
      plt.tight_layout()
      plt.savefig(output)

  plot_sims(model_names, get_predictions(2), sim_hellinger, "similarity/2-ahead.png", "2-ahead mean hellinger distances")
  plot_sims(model_names, get_predictions(3), sim_hellinger, "similarity/3-ahead.png", "3-ahead mean hellinger distances")
  plot_sims(model_names, get_predictions(4), sim_hellinger, "similarity/4-ahead.png", "4-ahead mean hellinger distances")
  plot_sims(model_names, get_predictions("onset_wk"), sim_hellinger, "similarity/onset-wk.png", "Onset week mean hellinger distances")
  plot_sims(model_names, get_predictions("peak"), sim_hellinger, "similarity/peak.png", "Peak mean hellinger distances")
  plot_sims(model_names, get_predictions("peak_wk"), sim_hellinger, "similarity/peak-wk.png", "Peak week mean hellinger distances")
#+END_SRC

#+RESULTS:

*** ~2-ahead~

[[file:./similarity/2-ahead.png]]

*** ~3-ahead~

[[file:./similarity/3-ahead.png]]

*** ~4-ahead~

[[file:./similarity/4-ahead.png]]

*** ~onset-week~

[[file:./similarity/onset-wk.png]]

*** ~peak~

[[file:./similarity/peak.png]]

*** ~peak-week~

[[file:./similarity/peak-wk.png]]

